const fs=require("fs"),glob=require("glob"),parse_rc_file=require("./parse-rc-file"),base_lang="en",available_langs=fs.readdirSync(__dirname).filter((e=>e.match(/^\w+(-\w+)?$/))),target_langs=available_langs.filter((e=>"en"!==e));function index_of_hotkey(e){return` ${e}`.search(/[^&]&[^&\s]/)}function has_hotkey(e){return-1!==index_of_hotkey(e)}function remove_hotkey(e){return e.replace(/\s?\(&.\)/,"").replace(/([^&]|^)&([^&\s])/,"$1$2")}console.log("Target languages:",target_langs);const remove_ellipsis=e=>e.replace("...",""),only_unique=(e,n,l)=>l.indexOf(e)===n,get_strings=e=>glob.sync(`${__dirname}/${e}/**/*.rc`).map((e=>parse_rc_file(fs.readFileSync(e,"utf16le").replace(/\ufeff/g,"")))).flat(),base_strings=get_strings("en");for(const e of target_langs){const n=get_strings(e),l={},s=(e,n,s)=>{l[e]=l[e]||[],l[e].push({target_string:n,fudgedness:s})},t=(e,n)=>{for(let l=0;l<n.length;l++){const i=e[l],a=n[l];if(i!==a&&i&&a){const e=/\t|\r?\n/;i.match(e)?t(i.split(e),a.split(e)):(s(remove_ellipsis(i),remove_ellipsis(a),1),has_hotkey(i)&&s(remove_ellipsis(remove_hotkey(i)),remove_ellipsis(remove_hotkey(a)),3))}}};t(base_strings,n);for(const e in l){const n=l[e];n.sort(((e,n)=>e.fudgedness-n.fudgedness));const s=n.map((({target_string:e})=>e)).filter(only_unique);s.length>1&&console.warn(`Collision for "${e}": ${JSON.stringify(s,null,"\t")}`),l[e]=s[0]}const i=`//\n// NOTE: This is a generated file! Don't edit it directly.\n// Eventually community translation will be set up on some translation platform.\n// \n// Generated with: npm run update-localization\n//\nloaded_localizations("${e}", ${JSON.stringify(l,null,"\t")});\n`;fs.writeFileSync(`${__dirname}/${e}/localizations.js`,i)}const file=require("path").resolve(__dirname+"/../index.html");let code=fs.readFileSync(file,"utf8");code=code.replace(/(available_languages\s*=\s*)\[[^\]]*\]/,`$1${JSON.stringify(available_langs).replace(/","/g,'", "')}`),fs.writeFileSync(file,code,"utf8"),console.log(`Updated available_languages list in "${file}"`);