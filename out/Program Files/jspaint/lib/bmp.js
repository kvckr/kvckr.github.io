/**
 * Based on: https://github.com/shaozilee/bmp-js/blob/db2c466ca1869ddc09e4b2143404eb03ecd490db/lib/encoder.js
 * @author shaozilee
 * @author 1j01
 * @license MIT
 *
 * BMP format encoder, encodes 24bit, 8bit, 4bit, and 1bit BMP files.
 * Doesn't support compression.
 *
 */
function encodeBMP(t,s=24){if(![1,4,8,24].includes(s))throw new Error(`not supported: ${s} bits per pixel`);const i=s/8,e=4*Math.ceil(t.width*i/4),h=t.height*e,o=2**s;let a,p,n=0;if(s<=8){const s=UPNG.quantize(t.data,o);p=s.inds,a=s.plte.map((t=>t.est.q.map((t=>Math.round(255*t))))),n=a.length}const r=54+4*n,l=h+r,d=new ArrayBuffer(l),c=new DataView(d);let w=0;if(c.setUint8(w,"BM".charCodeAt(0)),w+=1,c.setUint8(w,"BM".charCodeAt(1)),w+=1,c.setUint32(w,l,!0),w+=4,w+=4,c.setUint32(w,r,!0),w+=4,c.setUint32(w,40,!0),w+=4,c.setInt32(w,t.width,!0),w+=4,c.setInt32(w,-t.height,!0),w+=4,c.setUint16(w,1,!0),w+=2,c.setUint16(w,s,!0),w+=2,c.setUint32(w,0,!0),w+=4,c.setUint32(w,h,!0),w+=4,c.setInt32(w,0,!0),w+=4,c.setInt32(w,0,!0),w+=4,c.setUint32(w,n,!0),w+=4,c.setUint32(w,0,!0),w+=4,a)for(const[t,s,i]of a)c.setUint8(w,i),w+=1,c.setUint8(w,s),w+=1,c.setUint8(w,t),w+=1,w+=1;const g=t=>p[t/4];let f=0;for(let h=0;h<t.height;h+=1)for(let o=0;o<t.width;){const a=w+h*e+o*i;if(1===s){let s=0;for(let i=0;i<8&&o+i<t.width;i+=1)s|=g(f)<<7-i,f+=4;c.setUint8(a,s),o+=8}else if(4===s){let s=0;for(let i=0;i<2&&o+i<t.width;i+=1)s|=g(f)<<4*(1-i),f+=4;c.setUint8(a,s),o+=2}else 8===s?(c.setUint8(a,g(f)),f+=4,o+=1):(c.setUint8(a+2,t.data[f+0]),c.setUint8(a+1,t.data[f+1]),c.setUint8(a+0,t.data[f+2]),f+=4,o+=1)}return c.buffer}
/**
 * Based on https://github.com/ericandrewlewis/bitmap-js/blob/c33a6137829b18e3420a763ef20bffae874610b3/index.js
 * @author ericandrewlewis
 * @license MIT
 */function decodeBMP(t){const s=new BmpDecoder(t,{toRGBA:!0});return{bitsPerPixel:s.bitsPerPixel,colorTable:s.palette?s.palette.map((({red:t,green:s,blue:i})=>({r:t,g:s,b:i}))):[],imageData:new ImageData(s.data,s.width,s.height)}}
/**
 * Based on: https://github.com/hipstersmoothie/bmp-ts
 * @license MIT
 */const HeaderTypes={};function maskColor(t,s,i,e){const h=1+~t&t,o=1+~s&s,a=1+~i&i,p=1+~e&e,n=t/h+1,r=s/o+1,l=i/a+1,d=e/p+1;return{shiftRed:s=>(s&t)/h*256/n,shiftGreen:t=>(t&s)/o*256/r,shiftBlue:t=>(t&i)/a*256/l,shiftAlpha:0!==e?t=>(t&e)/p*256/d:()=>255}}HeaderTypes[HeaderTypes.BITMAP_INFO_HEADER=40]="BITMAP_INFO_HEADER",HeaderTypes[HeaderTypes.BITMAP_V2_INFO_HEADER=52]="BITMAP_V2_INFO_HEADER",HeaderTypes[HeaderTypes.BITMAP_V3_INFO_HEADER=56]="BITMAP_V3_INFO_HEADER",HeaderTypes[HeaderTypes.BITMAP_V4_HEADER=108]="BITMAP_V4_HEADER",HeaderTypes[HeaderTypes.BITMAP_V5_HEADER=124]="BITMAP_V5_HEADER",Object.freeze(HeaderTypes);class BmpDecoder{constructor(t,{toRGBA:s}={toRGBA:!1}){if(this.view=new DataView(t),this.toRGBA=!!s,this.pos=0,this.bottomUp=!0,this.flag=String.fromCharCode(this.view.getUint8(0))+String.fromCharCode(this.view.getUint8(1)),this.pos+=2,"BM"!==this.flag)throw new Error("Invalid BMP File");this.locRed=this.toRGBA?0:3,this.locGreen=this.toRGBA?1:2,this.locBlue=this.toRGBA?2:1,this.locAlpha=this.toRGBA?3:0,this.parseHeader(),this.parseRGBA()}parseHeader(){if(this.fileSize=this.view.getUint32(this.pos,!0),this.pos+=4,this.reserved1=this.view.getUint16(this.pos,!0),this.pos+=2,this.reserved2=this.view.getUint16(this.pos,!0),this.pos+=2,this.offset=this.view.getUint32(this.pos,!0),this.pos+=4,this.headerSize=this.view.getUint32(this.pos,!0),this.pos+=4,!(this.headerSize in HeaderTypes))throw new Error(`Unsupported BMP header size ${this.headerSize}`);if(this.width=this.view.getInt32(this.pos,!0),this.pos+=4,this.height=this.view.getInt32(this.pos,!0),this.pos+=4,this.height<0&&(this.height*=-1,this.bottomUp=!1),this.planes=this.view.getUint16(this.pos,!0),this.pos+=2,this.bitsPerPixel=this.view.getUint16(this.pos,!0),this.pos+=2,this.compression=this.view.getUint32(this.pos,!0),this.pos+=4,this.rawSize=this.view.getUint32(this.pos,!0),this.pos+=4,this.hr=this.view.getInt32(this.pos,!0),this.pos+=4,this.vr=this.view.getInt32(this.pos,!0),this.pos+=4,this.colors=this.view.getUint32(this.pos,!0),this.pos+=4,this.importantColors=this.view.getUint32(this.pos,!0),this.pos+=4,32===this.bitsPerPixel?(this.maskAlpha=0,this.maskRed=16711680,this.maskGreen=65280,this.maskBlue=255):16===this.bitsPerPixel&&(this.maskAlpha=0,this.maskRed=31744,this.maskGreen=992,this.maskBlue=31),(this.headerSize>HeaderTypes.BITMAP_INFO_HEADER||3===this.compression||6===this.compression)&&(this.maskRed=this.view.getUint32(this.pos,!0),this.pos+=4,this.maskGreen=this.view.getUint32(this.pos,!0),this.pos+=4,this.maskBlue=this.view.getUint32(this.pos,!0),this.pos+=4),(this.headerSize>HeaderTypes.BITMAP_V2_INFO_HEADER||6===this.compression)&&(this.maskAlpha=this.view.getUint32(this.pos,!0),this.pos+=4),this.headerSize>HeaderTypes.BITMAP_V3_INFO_HEADER&&(this.pos+=HeaderTypes.BITMAP_V4_HEADER-HeaderTypes.BITMAP_V3_INFO_HEADER),this.headerSize>HeaderTypes.BITMAP_V4_HEADER&&(this.pos+=HeaderTypes.BITMAP_V5_HEADER-HeaderTypes.BITMAP_V4_HEADER),this.bitsPerPixel<=8||this.colors>0){const t=0===this.colors?1<<this.bitsPerPixel:this.colors;this.palette=new Array(t);for(let s=0;s<t;s++){const t=this.view.getUint8(this.pos);this.pos+=1;const i=this.view.getUint8(this.pos);this.pos+=1;const e=this.view.getUint8(this.pos);this.pos+=1;const h=this.view.getUint8(this.pos);this.pos+=1,this.palette[s]={red:e,green:i,blue:t,quad:h}}}const t=maskColor(this.maskRed,this.maskGreen,this.maskBlue,this.maskAlpha);this.shiftRed=t.shiftRed,this.shiftGreen=t.shiftGreen,this.shiftBlue=t.shiftBlue,this.shiftAlpha=t.shiftAlpha}parseRGBA(){switch(this.data=new Uint8ClampedArray(this.width*this.height*4),this.bitsPerPixel){case 1:this.parse1bpp();break;case 4:this.parse4bpp();break;case 8:this.parse8bpp();break;case 16:this.parse16bpp();break;case 24:this.parse24bpp();break;default:this.parse32bpp()}}parse1bpp(){const t=Math.ceil(this.width/8),s=t%4,i=0!==s?4-s:0;let e;this.scanImage(i,t,((t,s)=>{s!==e&&(e=s);const i=this.view.getUint8(this.pos);this.pos+=1;const h=s*this.width*4+8*t*4;for(let s=0;s<8&&8*t+s<this.width;s++){const t=this.palette[i>>7-s&1];this.data[h+4*s+this.locAlpha]=255,this.data[h+4*s+this.locBlue]=t.blue,this.data[h+4*s+this.locGreen]=t.green,this.data[h+4*s+this.locRed]=t.red}}))}parse4bpp(){if(2===this.compression){let t=!1,s=this.bottomUp?this.height-1:0,i=0;for(;i<this.data.length;){const e=this.view.getUint8(this.pos);this.pos+=1;const h=this.view.getUint8(this.pos);if(this.pos+=1,0===e){if(0===h){s+=this.bottomUp?-1:1,i=s*this.width*4,t=!1;continue}if(1===h)break;if(2===h){const t=this.view.getUint8(this.pos);this.pos+=1;const e=this.view.getUint8(this.pos);this.pos+=1,s+=this.bottomUp?-e:e,i+=e*this.width*4+4*t}else{let s=this.view.getUint8(this.pos);this.pos+=1;for(let e=0;e<h;e++)i=this.setPixelData(i,t?15&s:(240&s)>>4),1&e&&e+1<h&&(s=this.view.getUint8(this.pos),this.pos+=1),t=!t;1==(h+1>>1&1)&&(this.pos+=1)}}else for(let s=0;s<e;s++)i=this.setPixelData(i,t?15&h:(240&h)>>4),t=!t}}else{const t=Math.ceil(this.width/2),s=t%4,i=0!==s?4-s:0;this.scanImage(i,t,((t,s)=>{const i=this.view.getUint8(this.pos);this.pos+=1;const e=s*this.width*4+2*t*4,h=i>>4;let o=this.palette[h];if(this.data[e+this.locAlpha]=255,this.data[e+this.locBlue]=o.blue,this.data[e+this.locGreen]=o.green,this.data[e+this.locRed]=o.red,2*t+1>=this.width)return!1;const a=15&i;o=this.palette[a],this.data[e+4+this.locAlpha]=255,this.data[e+4+this.locBlue]=o.blue,this.data[e+4+this.locGreen]=o.green,this.data[e+4+this.locRed]=o.red}))}}parse8bpp(){if(1===this.compression){let t=this.bottomUp?this.height-1:0,s=0;for(;s<this.data.length;){const i=this.view.getUint8(this.pos);this.pos+=1;const e=this.view.getUint8(this.pos);if(this.pos+=1,0===i){if(0===e){t+=this.bottomUp?-1:1,s=t*this.width*4;continue}if(1===e)break;if(2===e){const i=this.view.getUint8(this.pos);this.pos+=1;const e=this.view.getUint8(this.pos);this.pos+=1,t+=this.bottomUp?-e:e,s+=e*this.width*4+4*i}else{for(let t=0;t<e;t++){const t=this.view.getUint8(this.pos);this.pos+=1,s=this.setPixelData(s,t)}!0&e&&(this.pos+=1)}}else for(let t=0;t<i;t++)s=this.setPixelData(s,e)}}else{const t=this.width%4,s=0!==t?4-t:0;this.scanImage(s,this.width,((t,s)=>{const i=this.view.getUint8(this.pos);this.pos+=1;const e=s*this.width*4+4*t;if(i<this.palette.length){const t=this.palette[i];this.data[e+this.locRed]=t.red,this.data[e+this.locGreen]=t.green,this.data[e+this.locBlue]=t.blue,this.data[e+this.locAlpha]=255}else this.data[e]=255,this.data[e+1]=255,this.data[e+2]=255,this.data[e+3]=255}))}}parse16bpp(){const t=this.width%2*2;this.scanImage(t,this.width,((t,s)=>{const i=s*this.width*4+4*t,e=this.view.getUint16(this.pos,!0);this.pos+=2,this.data[i+this.locRed]=this.shiftRed(e),this.data[i+this.locGreen]=this.shiftGreen(e),this.data[i+this.locBlue]=this.shiftBlue(e),this.data[i+this.locAlpha]=255}))}parse24bpp(){const t=this.width%4;this.scanImage(t,this.width,((t,s)=>{const i=s*this.width*4+4*t,e=this.view.getUint8(this.pos);this.pos+=1;const h=this.view.getUint8(this.pos);this.pos+=1;const o=this.view.getUint8(this.pos);this.pos+=1,this.data[i+this.locRed]=o,this.data[i+this.locGreen]=h,this.data[i+this.locBlue]=e,this.data[i+this.locAlpha]=255}))}parse32bpp(){this.scanImage(0,this.width,((t,s)=>{const i=s*this.width*4+4*t,e=this.view.getUint32(this.pos,!0);this.pos+=4,this.data[i+this.locRed]=this.shiftRed(e),this.data[i+this.locGreen]=this.shiftGreen(e),this.data[i+this.locBlue]=this.shiftBlue(e),this.data[i+this.locAlpha]=this.shiftAlpha(e)}))}scanImage(t=0,s=this.width,i){for(let e=this.height-1;e>=0;e--){const h=this.bottomUp?e:this.height-1-e;for(let t=0;t<s;t++){if(!1===i.call(this,t,h))return}this.pos+=t}}setPixelData(t,s){const{blue:i,green:e,red:h}=this.palette[s];return this.data[t+this.locAlpha]=255,this.data[t+this.locBlue]=i,this.data[t+this.locGreen]=e,this.data[t+this.locRed]=h,t+4}}