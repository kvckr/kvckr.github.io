const{app,shell,session,dialog,ipcMain,BrowserWindow}=require("electron"),fs=require("fs"),path=require("path");app.enableSandbox(),require("electron-squirrel-startup")&&app.quit();const{isPackaged}=app,isDev="1"===process.env.ELECTRON_DEBUG||!isPackaged;isDev&&require("electron-debug")({showDevTools:!1});const reg_contents=`Windows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\SystemFileAssociations\\image\\shell\\edit\\command]\n@="\\"${process.argv[0].replace(/\\/g,"\\\\")}\\" ${isPackaged?"":'\\".\\" '}\\"%1\\""\n`,reg_file_path=path.join(isPackaged?path.dirname(process.argv[0]):".",`set-jspaint${isPackaged?"":"-DEV-MODE"}-as-default-image-editor.reg`);"win32"==process.platform&&isPackaged&&fs.writeFile(reg_file_path,reg_contents,(e=>{if(e)return console.error(e)}));const allowed_file_paths=[];let initial_file_path,mainWindow;if(process.argv.length>=2){const e=process.argv[isPackaged?1:2];allowed_file_paths.push(e)}const createWindow=()=>{mainWindow=new BrowserWindow({useContentSize:!0,autoHideMenuBar:!0,width:800,height:600,minWidth:260,minHeight:360,icon:path.join(__dirname,"../images/icons","win32"===process.platform?"jspaint.ico":"darwin"===process.platform?"jspaint.icns":"48x48.png"),title:"JS Paint",webPreferences:{preload:path.join(__dirname,"/electron-injected.js"),contextIsolation:!1}}),mainWindow.setMenu(null),mainWindow.loadURL(`file://${__dirname}/../index.html`),mainWindow.on("closed",(()=>{mainWindow=null})),mainWindow.on("close",(e=>{mainWindow.webContents.send("close-window-prompt"),e.preventDefault()})),mainWindow.webContents.on("will-navigate",((e,t)=>{t.includes("file://")||(e.preventDefault(),shell.openExternal(t))})),mainWindow.webContents.setWindowOpenHandler((({url:e})=>(e.includes("file://")||shell.openExternal(e),{action:"deny"}))),session.defaultSession.webRequest.onHeadersReceived(((e,t)=>{t({responseHeaders:{...e.responseHeaders,"Content-Security-Policy":["\n\t\t\t\t\tdefault-src 'self';\n\t\t\t\t\tstyle-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\n\t\t\t\t\timg-src 'self' data: blob: http: https:;\n\t\t\t\t\tfont-src 'self' https://fonts.gstatic.com;\n\t\t\t\t\tconnect-src * data: blob:;\n\t\t\t\t"]}})})),ipcMain.on("get-env-info",(e=>{e.returnValue={isDev,isMacOS:"darwin"===process.platform,initialFilePath:initial_file_path}})),ipcMain.on("set-represented-filename",((e,t)=>{allowed_file_paths.includes(t)&&mainWindow.setRepresentedFilename(t)})),ipcMain.on("set-document-edited",((e,t)=>{mainWindow.setDocumentEdited(t)})),ipcMain.handle("show-save-dialog",(async(e,t)=>{const{filePath:n,canceled:i}=await dialog.showSaveDialog(mainWindow,{title:t.title,defaultPath:t.defaultPath||path.basename(t.defaultFileName),filters:t.filters}),a=path.basename(n);return allowed_file_paths.push(n),{filePath:n,fileName:a,canceled:i}})),ipcMain.handle("show-open-dialog",(async(e,t)=>{const{filePaths:n,canceled:i}=await dialog.showOpenDialog(mainWindow,{title:t.title,defaultPath:t.defaultPath,filters:t.filters,properties:t.properties});return allowed_file_paths.push(...n),{filePaths:n,canceled:i}})),ipcMain.handle("write-file",(async(e,t,n)=>{if(!allowed_file_paths.includes(t))return{responseCode:"ACCESS_DENIED"};if(n instanceof ArrayBuffer){try{await fs.promises.writeFile(t,Buffer.from(n))}catch(e){return{responseCode:"WRITE_FAILED",error:e}}return{responseCode:"SUCCESS"}}return{responseCode:"INVALID_DATA"}})),ipcMain.handle("read-file",(async(e,t)=>{if(!allowed_file_paths.includes(t))return{responseCode:"ACCESS_DENIED"};try{const e=await fs.promises.readFile(t);return{responseCode:"SUCCESS",data:new Uint8Array(e),fileName:path.basename(t)}}catch(e){return{responseCode:"READ_FAILED",error:e}}})),ipcMain.handle("set-wallpaper",(async(e,t)=>{const n=path.join(app.getPath("userData"),"bg.png");if(!(t instanceof ArrayBuffer))return{responseCode:"INVALID_DATA"};t=new Uint8Array(t);const i=[137,80,78,71,13,10,26,10];for(let e=0;e<i.length;e++)if(t[e]!==i[e])return console.log("Found bytes:",t.slice(0,i.length),"but expected:",i),{responseCode:"INVALID_PNG_DATA"};try{await fs.promises.writeFile(n,Buffer.from(t))}catch(e){return{responseCode:"WRITE_TEMP_PNG_FAILED",error:e}}const a=`xfconf-query -c xfce4-desktop -l | grep last-image | while read path; do xfconf-query -c xfce4-desktop -p $path -s '${n}'; done`,{lookpath:s}=require("lookpath");if(await s("xfconf-query")&&await s("grep")){const e=require("util").promisify(require("child_process").exec);try{await e(a)}catch(e){return console.error("Error setting wallpaper for Xfce:",e),{responseCode:"XFCONF_FAILED",error:e}}return{responseCode:"SUCCESS"}}return new Promise(((e,t)=>{require("wallpaper").set(n,{scale:"center"},(t=>{e(t?{responseCode:"SET_WALLPAPER_FAILED",error:t}:{responseCode:"SUCCESS"})}))}))}))};app.on("ready",createWindow),app.on("window-all-closed",(()=>{"darwin"!==process.platform&&app.quit()})),app.on("activate",(()=>{null===mainWindow&&createWindow()}));