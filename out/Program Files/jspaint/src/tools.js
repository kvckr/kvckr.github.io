window.TOOL_FREE_FORM_SELECT="TOOL_FREE_FORM_SELECT",window.TOOL_SELECT="TOOL_SELECT",window.TOOL_ERASER="TOOL_ERASER",window.TOOL_FILL="TOOL_FILL",window.TOOL_PICK_COLOR="TOOL_PICK_COLOR",window.TOOL_MAGNIFIER="TOOL_MAGNIFIER",window.TOOL_PENCIL="TOOL_PENCIL",window.TOOL_BRUSH="TOOL_BRUSH",window.TOOL_AIRBRUSH="TOOL_AIRBRUSH",window.TOOL_TEXT="TOOL_TEXT",window.TOOL_LINE="TOOL_LINE",window.TOOL_CURVE="TOOL_CURVE",window.TOOL_RECTANGLE="TOOL_RECTANGLE",window.TOOL_POLYGON="TOOL_POLYGON",window.TOOL_ELLIPSE="TOOL_ELLIPSE",window.TOOL_ROUNDED_RECTANGLE="TOOL_ROUNDED_RECTANGLE",window.tools=[{id:TOOL_FREE_FORM_SELECT,name:localize("Free-Form Select"),speech_recognition:["lasso","select with lasso","select by lassoing","lassoing","lasso select","freeform select","free-form select","free form select","polygonal select","polygon select","shape select","outline select","select by outline","select by outlining","star select","shape select","select by shape","select by drawing a shape","select by drawing shape","lasso selection","freeform selection","free-form selection","free form selection","polygonal selection","polygon selection","shape selection","outline selection","selection by outline","selection by outlining","star selection","shape selection","selection by shape","selection by drawing a shape","selection by drawing shape","lasso selecting","freeform selecting","free-form selecting","free form selecting","polygonal selecting","polygon selecting","shape selecting","outline selecting","selecting by outline","selecting by outlining","star selecting","shape selecting","selecting by shape","selecting by drawing a shape","selecting by drawing shape","lasso selector","freeform selector","free-form selector","free form selector","polygonal selector","polygon selector","shape selector","outline selector","by outline selector","outlining selector","star selector","shape selector","by shape selector","by drawing a shape selector","by drawing shape selector"],help_icon:"p_free.gif",description:localize("Selects a free-form part of the picture to move, copy, or edit."),cursor:["precise",[16,16],"crosshair"],preview_canvas:null,points:[],x_min:1/0,x_max:-1/0,y_min:1/0,y_max:-1/0,pointerdown(){this.x_min=pointer.x,this.x_max=pointer.x+1,this.y_min=pointer.y,this.y_max=pointer.y+1,this.points=[],this.preview_canvas=make_canvas(main_canvas.width,main_canvas.height),deselect()},paint(e,o,t){pointer.x=Math.min(main_canvas.width,pointer.x),pointer.x=Math.max(0,pointer.x),pointer.y=Math.min(main_canvas.height,pointer.y),pointer.y=Math.max(0,pointer.y),this.points.push(pointer),this.x_min=Math.min(pointer.x,this.x_min),this.x_max=Math.max(pointer.x,this.x_max),this.y_min=Math.min(pointer.y,this.y_min),this.y_max=Math.max(pointer.y,this.y_max),bresenham_line(pointer_previous.x,pointer_previous.y,pointer.x,pointer.y,((e,o)=>{this.paint_iteration(e,o)}))},paint_iteration(e,o){e=Math.min(main_canvas.width,e),e=Math.max(0,e),o=Math.min(main_canvas.height,o);const t=~~(e-1),a=~~((o=Math.max(0,o))-1),s=this.preview_canvas.ctx,r=main_ctx.getImageData(t,a,2,2),i=s.getImageData(t,a,2,2);for(let e=0,o=i.data.length;e<o;e+=4)i.data[e+0]=255-r.data[e+0],i.data[e+1]=255-r.data[e+1],i.data[e+2]=255-r.data[e+2],i.data[e+3]=255;s.putImageData(i,t,a)},pointerup(){this.preview_canvas.width=1,this.preview_canvas.height=1;const e=copy_contents_within_polygon(main_canvas,this.points,this.x_min,this.y_min,this.x_max,this.y_max);selection&&(show_error_message("This isn't supposed to happen: Free-Form Select after Select in the tool chain?"),meld_selection_into_canvas()),undoable({name:localize("Free-Form Select"),icon:get_icon_for_tool(get_tool_by_id(TOOL_FREE_FORM_SELECT)),soft:!0},(()=>{selection=new OnCanvasSelection(this.x_min,this.y_min,this.x_max-this.x_min,this.y_max-this.y_min,e),selection.cut_out_background()}))},cancel(){this.preview_canvas&&(this.preview_canvas.width=1,this.preview_canvas.height=1)},drawPreviewUnderGrid(e,o,t,a,s,r,i){(pointer_active||pointer_over_canvas)&&this.preview_canvas&&(e.scale(s,s),e.translate(r,i),e.drawImage(this.preview_canvas,0,0))},$options:$choose_transparent_mode},{id:TOOL_SELECT,name:localize("Select"),speech_recognition:["select","rectangle select","rectangular select","box select","square select","drag select","select rectangle","select by rectangle","select rectangular region","select rectangular area","rectangular region select","rectangular area select","selection","rectangle selection","rectangular selection","box selection","square selection","rectangular region selection","rectangular area selection","selector","rectangle selector","rectangular selector","box selector","square selector","drag selector","rectangular region selector","rectangular area selector","make selection","make a selection","select a rectangle","select a box","select a rectangular region","select a rectangular area","selection box","part of image","part of picture","part of canvas","part of the image","part of the picture","part of the canvas","create selection","create a selection","selection maker","selection box maker"],help_icon:"p_sel.gif",description:localize("Selects a rectangular part of the picture to move, copy, or edit."),cursor:["precise",[16,16],"crosshair"],selectBox(e,o,t,a){if(t>1&&a>1){var s=selection;if(selection&&meld_selection_into_canvas(),ctrl)undoable({name:"Crop"},(()=>{var s=make_canvas(t,a);s.ctx.drawImage(main_canvas,-e,-o),main_ctx.copy(s),canvas_handles.show(),$canvas_area.trigger("resize")}));else if(s){var r=Math.min(s.x,e),i=Math.min(s.y,o),n=Math.max(s.x+s.width,e+t),c=Math.max(s.y+s.height,o+a),l=make_canvas(n-r,c-i),h=make_canvas(n-r,c-i);h.ctx.drawImage(main_canvas,e,o,t,a,e-r,o-i,t,a),l.ctx.drawImage(s.canvas,s.x-r,s.y-i),l.ctx.globalCompositeOperation="xor",l.ctx.drawImage(h,0,0),undoable({name:`${localize("Free-Form Select")}âŠ•${localize("Select")}`,icon:get_icon_for_tools([get_tool_by_id(TOOL_FREE_FORM_SELECT),get_tool_by_id(TOOL_SELECT)]),soft:!0},(()=>{selection=new OnCanvasSelection(r,i,n-r,c-i,l),selection.cut_out_background()}))}else undoable({name:localize("Select"),icon:get_icon_for_tool(get_tool_by_id(TOOL_SELECT)),soft:!0},(()=>{selection=new OnCanvasSelection(e,o,t,a)}))}},$options:$choose_transparent_mode},{id:TOOL_ERASER,name:localize("Eraser/Color Eraser"),speech_recognition:["erase","eraser","rubber","wiper","clearer","mark remover","obliterator","expunger","color eraser","color replacer","replace color","replace colors","erasing","erasing tool","color erasing","color replacing","replacing color","replacing colors","wiping tool","rubbing tool","clearing tool","mark removing tool","removal tool","obliterating tool","obliteration tool","expunging tool"],help_icon:"p_erase.gif",description:localize("Erases a portion of the picture, using the selected eraser shape."),cursor:["precise",[16,16],"crosshair"],mask_canvas:null,get_rect:(e,o)=>({rect_x:Math.ceil(e-eraser_size/2),rect_y:Math.ceil(o-eraser_size/2),rect_w:eraser_size,rect_h:eraser_size}),drawPreviewUnderGrid(e,o,t,a,s,r,i){if(!pointer_active&&!pointer_over_canvas)return;const{rect_x:n,rect_y:c,rect_w:l,rect_h:h}=this.get_rect(o,t);e.scale(s,s),e.translate(r,i),this.mask_canvas&&(this.render_from_mask(e,!0),transparency&&requestAnimationFrame(update_helper_layer)),e.fillStyle=selected_colors.background,e.fillRect(n,c,l,h)},drawPreviewAboveGrid(e,o,t,a,s,r,i){if(!pointer_active&&!pointer_over_canvas)return;const{rect_x:n,rect_y:c,rect_w:l,rect_h:h}=this.get_rect(o,t);e.scale(s,s),e.translate(r,i);const p=1/s;e.strokeStyle="black",e.lineWidth=p,a?e.strokeRect(n+e.lineWidth/2,c+e.lineWidth/2,l,h):e.strokeRect(n+e.lineWidth/2,c+e.lineWidth/2,l-e.lineWidth,h-e.lineWidth)},pointerdown(){this.mask_canvas=make_canvas(main_canvas.width,main_canvas.height)},render_from_mask(e,o){if(e.save(),e.globalCompositeOperation="destination-out",e.drawImage(this.mask_canvas,0,0),e.restore(),o||!transparency){let o=selected_colors.background;if(transparency){const t=performance.now()/2e3,a=6,s=e.canvas.height,r=t%1*-s*(a-1),i=e.createLinearGradient(0,r,0,r+s*a);i.addColorStop(0/a,"red"),i.addColorStop(1/a,"gold"),i.addColorStop(2/a,"#00d90b"),i.addColorStop(3/a,"#2e64d9"),i.addColorStop(4/a,"#8f2ed9"),i.addColorStop(5/a,"red"),i.addColorStop(6/a,"gold"),o=i}const t=make_canvas(this.mask_canvas);replace_colors_with_swatch(t.ctx,o,0,0),e.drawImage(t,0,0)}},pointerup(){this.mask_canvas&&undoable({name:get_language().match(/^en\b/)?this.color_eraser_mode?"Color Eraser":"Eraser":localize("Eraser/Color Eraser"),icon:get_icon_for_tool(this)},(()=>{this.render_from_mask(main_ctx),this.mask_canvas=null}))},cancel(){this.mask_canvas=null},paint(e,o,t){bresenham_line(pointer_previous.x,pointer_previous.y,pointer.x,pointer.y,((o,t)=>{this.paint_iteration(e,o,t)}))},paint_iteration(e,o,t){const{rect_x:a,rect_y:s,rect_w:r,rect_h:i}=this.get_rect(o,t);if(this.color_eraser_mode=0!==button,this.color_eraser_mode){const o=get_rgba_from_color(selected_colors.foreground),t=e.getImageData(a,s,r,i),n=this.mask_canvas.ctx.getImageData(a,s,r,i),c=1;for(let e=0,a=t.data.length;e<a;e+=4)Math.abs(t.data[e+0]-o[0])<=c&&Math.abs(t.data[e+1]-o[1])<=c&&Math.abs(t.data[e+2]-o[2])<=c&&Math.abs(t.data[e+3]-o[3])<=c&&(n.data[e+0]=255,n.data[e+1]=255,n.data[e+2]=255,n.data[e+3]=255);this.mask_canvas.ctx.putImageData(n,a,s)}else this.mask_canvas.ctx.fillStyle="white",this.mask_canvas.ctx.fillRect(a,s,r,i)},$options:$choose_eraser_size},{id:TOOL_FILL,name:localize("Fill With Color"),speech_recognition:["fill with color","flood fill","fill","flood filling","flood-filling","floodfilling","floodfill","fill area with color","flood fill area","fill area","color area","area fill","area filling","filling area","fill region with color","flood fill region","fill region","color region","region fill","region filling","filling region","fill bucket","paint bucket","paint can","dump","splash","paintbucket","bucket","dumping","paint dumping","paint dumper","dumper","dump bucket","color filler","filler"],help_icon:"p_paint.gif",description:"Fills an area with the selected drawing color.",cursor:["fill-bucket",[8,22],"crosshair"],pointerdown(e,o,t){shift?undoable({name:"Replace Color",icon:get_icon_for_tool(this)},(()=>{draw_noncontiguous_fill(e,o,t,fill_color)})):undoable({name:localize("Fill With Color"),icon:get_icon_for_tool(this)},(()=>{draw_fill(e,o,t,fill_color)}))}},{id:TOOL_PICK_COLOR,name:localize("Pick Color"),speech_recognition:["pick color","select color","color select","color selector","color picker","pick a color","color picking","color choosing","color selecting","color chooser","color lift","color lifter","color lifting","lift color","eyedropper","eye dropper","eye-dropper","pipette","Pasteur pipette","dropper","eye drop","eye-drop","eyedrop","suck up color","absorb color","choose color from image","choose color from picture","choose color from canvas","select color from image","select color from picture","select color from canvas","choose color from the image","choose color from the picture","choose color from the canvas","select color from the image","select color from the picture","select color from the canvas","choose a color from the image","choose a color from the picture","choose a color from the canvas","select a color from the image","select a color from the picture","select a color from the canvas","choose a color from image","choose a color from picture","choose a color from canvas","select a color from image","select a color from picture","select a color from canvas","pick color from canvas","pick color from document","pick color from page","pick color from image","pick color from picture","pick color from the canvas","pick color from the document","pick color from the page","pick color from the image","pick color from the picture","pick a color from canvas","pick a color from document","pick a color from page","pick a color from image","pick a color from picture","pick a color from the canvas","pick a color from the document","pick a color from the page","pick a color from the image","pick a color from the picture"],help_icon:"p_eye.gif",description:localize("Picks up a color from the picture for drawing."),cursor:["eye-dropper",[9,22],"crosshair"],deselect:!0,current_color:"",display_current_color(){this.$options.css({background:this.current_color})},pointerdown(){$G.one("pointerup",(()=>{this.$options.css({background:""})}))},paint(e,o,t){if(o>=0&&t>=0&&o<main_canvas.width&&t<main_canvas.height){const a=e.getImageData(~~o,~~t,1,1),[s,r,i,n]=a.data;this.current_color=`rgba(${s},${r},${i},${n/255})`}else this.current_color="white";this.display_current_color()},pointerup(){selected_colors[fill_color_k]=this.current_color,$G.trigger("option-changed")},$options:$(E("div"))},{id:TOOL_MAGNIFIER,name:localize("Magnifier"),speech_recognition:["magnifier","magnifying glass","loupe","hand lens","hand glass","eyeglass","eye glass","lens","simple microscope","microscope","glass","spyglass","telescope","magnification","zoom","zoom in","zoom out","zoomer","magnifying","zooming","enlarging tool"],help_icon:"p_zoom.gif",description:localize("Changes the magnification."),cursor:["magnifier",[16,16],"zoom-in"],deselect:!0,getProspectiveMagnification:()=>1===magnification?return_to_magnification:1,drawPreviewAboveGrid(e,o,t,a,s,r,i){if(!pointer_active&&!pointer_over_canvas)return;if(pointer_active)return;const n=this.getProspectiveMagnification();if(n<magnification?$canvas.css({cursor:make_css_cursor("magnifier",[16,16],"zoom-out")}):$canvas.css({cursor:make_css_cursor("magnifier",[16,16],"zoom-in")}),n<magnification)return;const c=$canvas_area.width()/n,l=$canvas_area.height()/n;let h=~~(o-c/2),p=~~(t-l/2);h=Math.max(0,h),p=Math.max(0,p),h=Math.min(main_canvas.width-c,h),p=Math.min(main_canvas.height-l,p);let _=h+c,d=p+l;h=Math.max(0,h),p=Math.max(0,p),_=Math.min(main_canvas.width,_),d=Math.min(main_canvas.height,d);const m=_-h,g=d-p,u=h,v=p,f=main_canvas.ctx.getImageData(u,v,m+1,g+1),w=e.getImageData((u+r)*s,(v+i)*s,m*s+1,g*s+1);function x(e,o){const t=4*(~~(e/s)+~~(o/s)*f.width),a=4*(e+o*w.width);w.data[a+0]=255-f.data[t+0],w.data[a+1]=255-f.data[t+1],w.data[a+2]=255-f.data[t+2],w.data[a+3]=255}for(let e=0,o=w.width;e<o;e+=1)x(e,0),x(e,w.height-1);for(let e=1,o=w.height-1;e<o;e+=1)x(0,e),x(w.width-1,e);e.putImageData(w,(u+r)*s,(v+i)*s)},pointerdown(e,o,t){const a=magnification,s=this.getProspectiveMagnification();if(set_magnification(s),magnification>a){const e=$canvas_area.width()/magnification,s=$canvas_area.height()/magnification;$canvas_area.scrollLeft((o-e/2)*magnification/a),$canvas_area.scrollTop((t-s/2)*magnification/a),$canvas_area.trigger("scroll")}},$options:$choose_magnification},{id:TOOL_PENCIL,name:localize("Pencil"),speech_recognition:["pencil","lead","graphite","pen","pixel","pixel art","penciling","penning","pixeling"],help_icon:"p_pencil.gif",description:localize("Draws a free-form line one pixel wide."),cursor:["pencil",[13,23],"crosshair"],stroke_only:!0,get_brush:()=>({size:pencil_size,shape:"circle"})},{id:TOOL_BRUSH,name:localize("Brush"),speech_recognition:["brush","paint brush","paintbrush","paint tool","painting tool","brushing paint tool","paint brushing tool","brushing"],help_icon:"p_brush.gif",description:localize("Draws using a brush with the selected shape and size."),cursor:["precise-dotted",[16,16],"crosshair"],dynamic_preview_cursor:!0,get_brush:()=>({size:brush_size,shape:brush_shape}),$options:$choose_brush},{id:TOOL_AIRBRUSH,name:localize("Airbrush"),speech_recognition:["air brush","airbrush","aerograph","airbrushing","air brushing","spray paint","spraypaint","paint spray","spray painting","spraypainting","spray paint can","spraypaint can","spraycan","spray-can","spray can","graffiti","scatter","splatter","scattering","splattering","aerosol","aerosol can","throwie","flamethrower"],help_icon:"p_airb.gif",description:localize("Draws using an airbrush of the selected size."),cursor:["airbrush",[7,22],"crosshair"],paint_on_time_interval:5,paint_mask(e,o,t){const a=airbrush_size/2;for(let s=0;s<6+a/5;s++){const s=(2*Math.random()-1)*a,r=(2*Math.random()-1)*a;s*s+r*r<=a*a&&e.fillRect(o+~~s,t+~~r,1,1)}update_helper_layer()},$options:$choose_airbrush_size},{id:TOOL_TEXT,name:localize("Text"),speech_recognition:["text","type","typography","write","writing","words","text box","text-box","textbox","word","lettering","font","fonts","texts"],help_icon:"p_txt.gif",description:localize("Inserts text into the picture."),cursor:["precise",[16,16],"crosshair"],preload(){setTimeout(FontDetective.preload,10)},selectBox(e,o,t,a){t>1&&a>1&&(textbox=new OnCanvasTextBox(e,o,t,a))},$options:$choose_transparent_mode},{id:TOOL_LINE,name:localize("Line"),speech_recognition:["line","line segment","straight line","lines","line segments","straight lines"],help_icon:"p_line.gif",description:localize("Draws a straight line with the selected line width."),cursor:["precise",[16,16],"crosshair"],stroke_only:!0,shape(e,o,t,a,s){update_brush_for_drawing_lines(stroke_size),draw_line(e,o,t,o+a,t+s,stroke_size)},$options:$choose_stroke_size},{id:TOOL_CURVE,name:localize("Curve"),speech_recognition:["curve","curved line","curvy","curvy line","Bezier","Bezier curve","spline","curves","splines","curved","curving","wave","wavy line","rounded line","round line","oscilloscope","sine wave","cosine","cosine wave"],help_icon:"p_curve.gif",description:localize("Draws a curved line with the selected line width."),cursor:["precise",[16,16],"crosshair"],stroke_only:!0,points:[],preview_canvas:null,pointerup(e,o,t){this.points.length>=4&&(undoable({name:localize("Curve"),icon:get_icon_for_tool(this)},(()=>{e.drawImage(this.preview_canvas,0,0)})),this.points=[])},pointerdown(e,o,t){this.points.length<1?(this.preview_canvas=make_canvas(main_canvas.width,main_canvas.height),this.points.push({x:o,y:t}),$("body").hasClass("eye-gaze-mode")||this.points.push({x:o,y:t})):this.points.push({x:o,y:t})},paint(e,o,t){if(this.points.length<1)return;update_brush_for_drawing_lines(stroke_size);const a=this.points.length-1;this.points[a].x=o,this.points[a].y=t,this.preview_canvas.ctx.clearRect(0,0,this.preview_canvas.width,this.preview_canvas.height),this.preview_canvas.ctx.strokeStyle=stroke_color,4===this.points.length?draw_bezier_curve(this.preview_canvas.ctx,this.points[0].x,this.points[0].y,this.points[2].x,this.points[2].y,this.points[3].x,this.points[3].y,this.points[1].x,this.points[1].y,stroke_size):3===this.points.length?draw_quadratic_curve(this.preview_canvas.ctx,this.points[0].x,this.points[0].y,this.points[2].x,this.points[2].y,this.points[1].x,this.points[1].y,stroke_size):2===this.points.length?draw_line(this.preview_canvas.ctx,this.points[0].x,this.points[0].y,this.points[1].x,this.points[1].y,stroke_size):draw_line(this.preview_canvas.ctx,this.points[0].x,this.points[0].y,this.points[0].x,this.points[0].y,stroke_size)},drawPreviewUnderGrid(e,o,t,a,s,r,i){this.preview_canvas&&(e.scale(s,s),e.translate(r,i),this.points.length>=1&&e.drawImage(this.preview_canvas,0,0))},cancel(){this.points=[]},end(){this.points=[],update_helper_layer()},$options:$choose_stroke_size},{id:TOOL_RECTANGLE,name:localize("Rectangle"),speech_recognition:["rectangle","square","box","rect","sharp rectangle","sharp square","sharp box","sharp rect","sharp corners rectangle","sharp corners square","sharp corners box","sharp corners rect","sharp cornered rectangle","sharp cornered square","sharp cornered box","sharp cornered rect","rectangle with sharp corners","square with sharp corners","box with sharp corners","rect with sharp corners","rectangles","squares","boxes","rects","sharp rectangles","sharp squares","sharp boxes","sharp rects","sharp corners rectangles","sharp corners squares","sharp corners boxes","sharp corners rects","sharp cornered rectangles","sharp cornered squares","sharp cornered boxes","sharp cornered rects","rectangles with sharp corners","squares with sharp corners","boxes with sharp corners","rects with sharp corners"],help_icon:"p_rect.gif",description:localize("Draws a rectangle with the selected fill style."),cursor:["precise",[16,16],"crosshair"],shape(e,o,t,a,s){a<0&&(o+=a,a=-a),s<0&&(t+=s,s=-s),this.$options.fill&&e.fillRect(o,t,a,s),this.$options.stroke&&(a<2*stroke_size||s<2*stroke_size?(e.save(),e.fillStyle=e.strokeStyle,e.fillRect(o,t,a,s),e.restore()):e.strokeRect(o+stroke_size/2,t+stroke_size/2,a-stroke_size,s-stroke_size))},$options:$ChooseShapeStyle()},{id:TOOL_POLYGON,name:localize("Polygon"),speech_recognition:["polygon","poly","shape","n-gon","free-form polygon","freeform polygon","free form polygon","triangle","quadrangle","pentagon","hexagon","heptagon","octagon","nonagon","decagon","undecagon","dodecagon","polygons","polys","shapes","n-gons","free-form polygons","freeform polygons","free form polygons","triangles","quadrangles","pentagons","hexagons","heptagons","octagons","nonagons","decagons","undecagons","dodecagons"],help_icon:"p_poly.gif",description:localize("Draws a polygon with the selected fill style."),cursor:["precise",[16,16],"crosshair"],last_click_pointerdown:{x:-1/0,y:-1/0,time:-1/0},last_click_pointerup:{x:-1/0,y:-1/0,time:-1/0},points:[],preview_canvas:null,pointerup(e,o,t){if(this.points.length<1)return;const a=this.points.length-1;this.points[a].x=o,this.points[a].y=t;const s=this.points[a].x-this.points[0].x,r=this.points[a].y-this.points[0].y,i=Math.sqrt(s*s+r*r);$("body").hasClass("eye-gaze-mode")?this.points.length>=3&&i<10*stroke_size+20&&this.complete(e):i<5.1010101*stroke_size&&this.complete(e),this.last_click_pointerup={x:o,y:t,time:+new Date}},pointerdown(e,o,t){if(this.points.length<1)this.preview_canvas=make_canvas(main_canvas.width,main_canvas.height),this.points.push({x:o,y:t}),$("body").hasClass("eye-gaze-mode")||this.points.push({x:o,y:t});else{const a=this.last_click_pointerdown.x,s=this.last_click_pointerdown.y,r=this.last_click_pointerdown.time,i=o-a,n=t-s,c=+new Date-r;Math.sqrt(i*i+n*n)<4.1010101&&c<250?this.complete(e):this.points.push({x:o,y:t})}this.last_click_pointerdown={x:o,y:t,time:+new Date}},paint(e,o,t){if(this.points.length<1)return;const a=this.points.length-1;if(this.points[a].x=o,this.points[a].y=t,this.preview_canvas.ctx.clearRect(0,0,this.preview_canvas.width,this.preview_canvas.height),this.$options.fill&&!this.$options.stroke){this.preview_canvas.ctx.drawImage(main_canvas,0,0),this.preview_canvas.ctx.strokeStyle="white",this.preview_canvas.ctx.globalCompositeOperation="difference";var s=stroke_size;stroke_size=2,draw_line_strip(this.preview_canvas.ctx,this.points),stroke_size=s}else this.points.length>1?(this.preview_canvas.ctx.strokeStyle=stroke_color,draw_line_strip(this.preview_canvas.ctx,this.points)):draw_line(this.preview_canvas.ctx,this.points[0].x,this.points[0].y,this.points[0].x,this.points[0].y,stroke_size)},drawPreviewUnderGrid(e,o,t,a,s,r,i){this.preview_canvas&&(e.scale(s,s),e.translate(r,i),e.drawImage(this.preview_canvas,0,0))},complete(e){this.points.length>=3&&undoable({name:localize("Polygon"),icon:get_icon_for_tool(this)},(()=>{e.fillStyle=fill_color,e.strokeStyle=stroke_color;var o=stroke_size;this.$options.fill&&!this.$options.stroke&&(stroke_size=2,e.strokeStyle=fill_color),draw_polygon(e,this.points,this.$options.stroke||this.$options.fill&&!this.$options.stroke,this.$options.fill),stroke_size=o})),this.reset()},cancel(){this.reset()},end(e){this.complete(e),update_helper_layer()},reset(){this.points=[],this.last_click_pointerdown={x:-1/0,y:-1/0,time:-1/0},this.last_click_pointerup={x:-1/0,y:-1/0,time:-1/0},this.preview_canvas&&(this.preview_canvas.width=1,this.preview_canvas.height=1)},shape_colors:!0,$options:$ChooseShapeStyle()},{id:TOOL_ELLIPSE,name:localize("Ellipse"),speech_recognition:["ellipse","circle","oval","ovoid","ovaloid","oviform","elliptical","oblong circle","stretched circle","ball","sphere","round tool","rounded tool","ellipses","circles","ovals","ovoids","ovaloids","oviforms","ellipticals","oblong circles","stretched circles","balls","spheres"],help_icon:"p_oval.gif",description:localize("Draws an ellipse with the selected fill style."),cursor:["precise",[16,16],"crosshair"],shape(e,o,t,a,s){a<0&&(o+=a,a=-a),s<0&&(t+=s,s=-s),a<stroke_size||s<stroke_size?(e.fillStyle=e.strokeStyle,draw_ellipse(e,o,t,a,s,!1,!0)):draw_ellipse(e,o+~~(stroke_size/2),t+~~(stroke_size/2),a-stroke_size,s-stroke_size,this.$options.stroke,this.$options.fill)},$options:$ChooseShapeStyle()},{id:TOOL_ROUNDED_RECTANGLE,name:localize("Rounded Rectangle"),speech_recognition:["rounded rectangle","rounded square","rounded box","round rectangle","round square","round box","rounded corners rectangle","rounded corners square","rounded corners box","round cornered rectangle","round cornered square","round cornered box","rounded cornered rectangle","rounded cornered square","rounded cornered box","rounded corner rectangle","rounded corner square","rounded corner box","rectangle with round corners","square with round corners","box with round corners","rectangle with rounded corners","square with rounded corners","box with rounded corners","soft rectangle","soft square","soft box","soft corners rectangle","soft corners square","soft corners box","soft cornered rectangle","soft cornered square","soft cornered box","soft corner rectangle","soft corner square","soft corner box","rectangle with soft corners","square with soft corners","box with soft corners","round rect","roundrect","rounded rectangles","rounded squares","rounded boxes","round rectangles","round squares","round boxes","rounded corners rectangles","rounded corners squares","rounded corners boxes","round cornered rectangles","round cornered squares","round cornered boxes","rounded cornered rectangles","rounded cornered squares","rounded cornered boxes","rounded corner rectangles","rounded corner squares","rounded corner boxes","rectangles with round corners","squares with round corners","boxes with round corners","rectangles with rounded corners","squares with rounded corners","boxes with rounded corners","soft rectangles","soft squares","soft boxes","soft corners rectangles","soft corners squares","soft corners boxes","soft cornered rectangles","soft cornered squares","soft cornered boxes","soft corner rectangles","soft corner squares","soft corner boxes","rectangles with soft corners","squares with soft corners","boxes with soft corners","round rects","roundrects"],help_icon:"p_rrect.gif",description:localize("Draws a rounded rectangle with the selected fill style."),cursor:["precise",[16,16],"crosshair"],shape(e,o,t,a,s){if(a<0&&(o+=a,a=-a),s<0&&(t+=s,s=-s),a<stroke_size||s<stroke_size){e.fillStyle=e.strokeStyle;const r=Math.min(8,a/2,s/2);draw_rounded_rectangle(e,o,t,a,s,r,r,!1,!0)}else{const r=Math.min(8,(a-stroke_size)/2,(s-stroke_size)/2);draw_rounded_rectangle(e,o+~~(stroke_size/2),t+~~(stroke_size/2),a-stroke_size,s-stroke_size,r,r,this.$options.stroke,this.$options.fill)}},$options:$ChooseShapeStyle()}],tools.forEach((e=>{if(e.selectBox){let o=0,t=0,a=!1,s=0,r=0,i=0,n=0;e.pointerdown=()=>{o=pointer.x,t=pointer.y,a=!1,$G.one("pointermove",(()=>{a=!0})),selection&&meld_selection_into_canvas(),textbox&&meld_textbox_into_canvas(),canvas_handles.hide()},e.paint=()=>{s=~~Math.max(0,Math.min(o,pointer.x)),r=~~Math.max(0,Math.min(t,pointer.y)),i=~~Math.min(main_canvas.width,Math.max(o,pointer.x)+1)-s,n=~~Math.min(main_canvas.height,Math.max(t,pointer.y+1))-r},e.pointerup=()=>{canvas_handles.show(),e.selectBox(s,r,i,n)},e.cancel=()=>{canvas_handles.show()},e.drawPreviewUnderGrid=(e,o,t,s,r,i,n)=>{pointer_active&&a&&(e.scale(r,r),e.translate(i,n),e.drawImage(main_canvas,0,0))},e.drawPreviewAboveGrid=(e,o,t,c,l,h,p)=>{pointer_active&&a&&draw_selection_box(e,s,r,i,n,l,h,p)}}e.shape&&(e.shape_canvas=null,e.pointerdown=()=>{e.shape_canvas=make_canvas(main_canvas.width,main_canvas.height)},e.paint=()=>{e.shape_canvas.ctx.clearRect(0,0,e.shape_canvas.width,e.shape_canvas.height),e.shape_canvas.ctx.fillStyle=main_ctx.fillStyle,e.shape_canvas.ctx.strokeStyle=main_ctx.strokeStyle,e.shape_canvas.ctx.lineWidth=main_ctx.lineWidth,e.shape(e.shape_canvas.ctx,pointer_start.x,pointer_start.y,pointer.x-pointer_start.x,pointer.y-pointer_start.y)},e.pointerup=()=>{e.shape_canvas&&undoable({name:e.name,icon:get_icon_for_tool(e)},(()=>{main_ctx.drawImage(e.shape_canvas,0,0),e.shape_canvas=null}))},e.drawPreviewUnderGrid=(o,t,a,s,r,i,n)=>{pointer_active&&e.shape_canvas&&(o.scale(r,r),o.translate(i,n),o.drawImage(e.shape_canvas,0,0))}),e.paint_mask&&(e.mask_canvas=null,e.pointerdown=(o,t,a)=>{e.mask_canvas||(e.mask_canvas=make_canvas(main_canvas.width,main_canvas.height)),e.mask_canvas.width!==main_canvas.width&&(e.mask_canvas.width=main_canvas.width),e.mask_canvas.height!==main_canvas.height&&(e.mask_canvas.height=main_canvas.height),e.mask_canvas.ctx.disable_image_smoothing()},e.pointerup=()=>{e.mask_canvas&&undoable({name:e.name,icon:get_icon_for_tool(e)},(()=>{e.render_from_mask(main_ctx),e.mask_canvas.width=1,e.mask_canvas.height=1}))},e.paint=(o,t,a)=>{e.paint_mask(e.mask_canvas.ctx,t,a)},e.cancel=()=>{e.mask_canvas&&(e.mask_canvas.width=1,e.mask_canvas.height=1)},e.render_from_mask=(o,t)=>{o.save(),o.globalCompositeOperation="destination-out",o.drawImage(e.mask_canvas,0,0),o.restore();let a=stroke_color;const s=get_rgba_from_color(a)[3]<253;if(s&&t){const e=performance.now()/2e3,t=6,s=o.canvas.height,r=e%1*-s*(t-1),i=o.createLinearGradient(0,r,0,r+s*t);i.addColorStop(0/t,"red"),i.addColorStop(1/t,"gold"),i.addColorStop(2/t,"#00d90b"),i.addColorStop(3/t,"#2e64d9"),i.addColorStop(4/t,"#8f2ed9"),i.addColorStop(5/t,"red"),i.addColorStop(6/t,"gold"),a=i}const r=make_canvas(e.mask_canvas);return replace_colors_with_swatch(r.ctx,a,0,0),o.drawImage(r,0,0),s},e.drawPreviewUnderGrid=(o,t,a,s,r,i,n)=>{(pointer_active||pointer_over_canvas)&&(o.scale(r,r),o.translate(i,n),e.mask_canvas)&&e.render_from_mask(o,!0)&&requestAnimationFrame(update_helper_layer)}),e.get_brush&&(e.mask_canvas=null,e.init_mask_canvas=(o,t,a)=>{e.mask_canvas||(e.mask_canvas=make_canvas(main_canvas.width,main_canvas.height)),e.mask_canvas.width!==main_canvas.width&&(e.mask_canvas.width=main_canvas.width),e.mask_canvas.height!==main_canvas.height&&(e.mask_canvas.height=main_canvas.height),e.mask_canvas.ctx.disable_image_smoothing()},e.pointerdown=(o,t,a)=>{e.init_mask_canvas()},e.pointerup=()=>{undoable({name:e.name,icon:get_icon_for_tool(e)},(()=>{e.render_from_mask(main_ctx),e.mask_canvas.width=1,e.mask_canvas.height=1}))},e.paint=()=>{const o=e.get_brush(),t=get_circumference_points_for_brush(o.shape,o.size);e.mask_canvas.ctx.fillStyle=stroke_color,(o.size>1?bresenham_dense_line:bresenham_line)(pointer_previous.x,pointer_previous.y,pointer.x,pointer.y,((o,a)=>{for(const s of t)e.mask_canvas.ctx.fillRect(o+s.x,a+s.y,1,1)})),stamp_brush_canvas(e.mask_canvas.ctx,pointer_previous.x,pointer_previous.y,o.shape,o.size),stamp_brush_canvas(e.mask_canvas.ctx,pointer.x,pointer.y,o.shape,o.size)},e.cancel=()=>{e.mask_canvas&&(e.mask_canvas.width=1,e.mask_canvas.height=1)},e.render_from_mask=(o,t)=>{o.save(),o.globalCompositeOperation="destination-out",o.drawImage(e.mask_canvas,0,0),o.restore();let a=stroke_color;const s=get_rgba_from_color(a)[3]<253;if(s&&t){const e=performance.now()/2e3,t=6,s=o.canvas.height,r=e%1*-s*(t-1),i=o.createLinearGradient(0,r,0,r+s*t);i.addColorStop(0/t,"red"),i.addColorStop(1/t,"gold"),i.addColorStop(2/t,"#00d90b"),i.addColorStop(3/t,"#2e64d9"),i.addColorStop(4/t,"#8f2ed9"),i.addColorStop(5/t,"red"),i.addColorStop(6/t,"gold"),a=i}const r=make_canvas(e.mask_canvas);if(t&&e.dynamic_preview_cursor){const o=e.get_brush();stamp_brush_canvas(r.ctx,pointer.x,pointer.y,o.shape,o.size)}return replace_colors_with_swatch(r.ctx,a,0,0),o.drawImage(r,0,0),s},e.drawPreviewUnderGrid=(o,t,a,s,r,i,n)=>{(pointer_active||pointer_over_canvas)&&(o.scale(r,r),o.translate(i,n),e.init_mask_canvas(),e.render_from_mask(o,!0)&&requestAnimationFrame(update_helper_layer))})}));