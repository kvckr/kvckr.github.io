const{ipcRenderer}=require("electron"),{isDev,isMacOS,initialFilePath}=ipcRenderer.sendSync("get-env-info");function show_save_error_message(e,r){return"ACCESS_DENIED"===e?show_error_message(localize("Access denied.")):"INVALID_DATA"===e?show_error_message("Failed to save: Invalid data. This shouldn't happen!"):"SUCCESS"!==e?show_error_message(localize("Failed to save document."),r):void 0}async function write_blob_to_file_path(e,r){const o=await r.arrayBuffer(),{responseCode:a,error:s}=await ipcRenderer.invoke("write-file",e,o);return{responseCode:a,error:s}}window.is_electron_app=!0,window.electron_is_dev=isDev,window.initial_system_file_handle=initialFilePath,ipcRenderer.on("close-window-prompt",(()=>{are_you_sure((()=>{window.close()}))})),window.setRepresentedFilename=e=>{ipcRenderer.send("set-represented-filename",e)},window.setDocumentEdited=e=>{ipcRenderer.send("set-document-edited",e)},window.systemHooks=window.systemHooks||{},window.systemHooks.showSaveFileDialog=async({formats:e,defaultFileName:r,defaultPath:o,defaultFileFormatID:a,getBlob:s,savedCallbackUnreliable:t})=>{const i=(e=formats_unique_per_file_extension(e)).map((({name:e,extensions:r})=>({name:e,extensions:r})));let n,l,d;try{({filePath:n,fileName:l,canceled:d}=await ipcRenderer.invoke("show-save-dialog",{title:localize("Save As"),defaultFileName:r,defaultPath:o,filters:i}))}catch(m){show_error_message(localize("Failed to save document."),m)}if(d)return;const w=n.indexOf(".")>-1&&n.split(/\./g).pop().toLowerCase();if(!w)return show_error_message("Missing file extension - Try adding .png to the end of the file name");const _=get_format_from_extension(e,n);if(!_)return show_error_message(`Can't save as *.${w} - Try adding .png to the end of the file name`);const c=await s(_.mimeType),{responseCode:p,error:m}=await write_blob_to_file_path(n,c);if("SUCCESS"!==p)return show_save_error_message(p,m);t&&t({newFileName:l,newFileFormatID:_.mimeType,newFileHandle:n,newBlob:c})},window.systemHooks.showOpenFileDialog=async({formats:e,defaultPath:r})=>{const o=e.map((({name:e,extensions:r})=>({name:e,extensions:r}))),{canceled:a,filePaths:s}=await ipcRenderer.invoke("show-open-dialog",{title:localize("Open"),filters:o,defaultPath:r});if(a)throw new Error("user canceled");const t=s[0];return{file:await window.systemHooks.readBlobFromHandle(t),fileHandle:t}},window.systemHooks.writeBlobToHandle=async(e,r)=>{if("string"!=typeof e)return show_error_message("writeBlobToHandle in Electron expects a file path");const{responseCode:o,error:a}=await write_blob_to_file_path(e,r);return"SUCCESS"!==o?show_save_error_message(o,a):void 0},window.systemHooks.readBlobFromHandle=async e=>{if("string"!=typeof e)return show_error_message("readBlobFromHandle in Electron expects a file path");const{responseCode:r,error:o,data:a,fileName:s}=await ipcRenderer.invoke("read-file",e);if("ACCESS_DENIED"===r)return show_error_message(localize("Access denied."));if("SUCCESS"!==r)return show_error_message(localize("Paint cannot open this file."),o);const t=new File([new Uint8Array(a)],s);return Object.defineProperty(t,"path",{value:e}),t},window.systemHooks.setWallpaperCentered=e=>{let r;if(isMacOS)r=e;else{r=make_canvas(screen.width,screen.height);const o=(screen.width-e.width)/2,a=(screen.height-e.height)/2;r.ctx.drawImage(e,~~o,~~a)}r.toBlob((e=>{sanity_check_blob(e,(()=>{e.arrayBuffer().then((e=>{ipcRenderer.invoke("set-wallpaper",e).then((({responseCode:e,error:r})=>"WRITE_TEMP_PNG_FAILED"===e?show_error_message("Failed to set wallpaper: Couldn't write temporary image file.",r):"INVALID_DATA"===e?show_error_message("Failed to set wallpaper. Invalid data in IPC.",r):"INVALID_PNG_DATA"===e?show_error_message(`Failed to set wallpaper.\n\n${localize("Unexpected file format.")}`,r):"XFCONF_FAILED"===e?show_error_message("Failed to set wallpaper (for Xfce).",r):"SUCCESS"!==e?show_error_message("Failed to set wallpaper.",r):void 0)).catch((e=>{show_error_message("Failed to set wallpaper.",e)}))}),(e=>{show_error_message("Failed to set wallpaper: Couldn't read blob as array buffer.",e)}))}))}))};